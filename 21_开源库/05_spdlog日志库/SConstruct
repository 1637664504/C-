import os

env = None
# 1.编译器
if os.system("which clang"):
    env = Environment()
else:
    # clang编译器
    env = Environment(tools = ['default', 'clang'])
    env['CC']=['clang']
    env['CXX']=['clang++']

# 2.自动生成后缀.out
def gen_exec_file(file):
    return os.path.splitext(file)[0]+'.out'

def build_out(src_file,ccflag="",ldflag=""):
    src = Split(src_file)
    target = gen_exec_file(src[0])
    env.Program(target, src, CCFLAGS=ccflag, LINKFLAGS=ldflag)

env['CCFLAGS'] = ' -ggdb3 -O0'         # gdb 调试开关
# env['CCFLAGS'] += ' -DDEBUG'          # Debug log开关
env['LIBS']=['pthread']

build_out("1_spdlog_输出终端.cc")
build_out("2_spdlog_输出到文件.cc")
build_out("3_spdlog_定时输出文件.cc")
build_out("4_spdlog_不同的logger_函数输出效果.cc")

build_out("11_sdblog_格式化实例.cc")
build_out("12_spdlog_输出到文件.cc")
build_out("13_spdlog_自定义格式输出_pattern.cc")